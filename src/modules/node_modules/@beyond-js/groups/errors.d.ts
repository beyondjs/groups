/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/response/main';
// codes.ts
declare namespace ns_0 {
  export enum ErrorCodes {
    internalServerError = 500,
    userNotAuthorizedOnGroup = 403,
    userAlreadyExistOnGroup = 300,
    invitationAlreadyExists = 301,
    joinWaitingToConfirm = 302,
    invitationNotValid = 303,
    mailTemplatesNotDefined = 304,
    mailNotSend = 305,
    codeNotFound = 306,
  }
}


// generator.ts
declare namespace ns_1 {
  import BusinessErrorManager = ns_2.BusinessErrorManager;
  export class ErrorGenerator {
    static internalServerError(exc: Error): BusinessErrorManager;
    static internalErrorTrace(specs?: {
      code?: string;
      message?: string;
      exc?: Error;
    }): BusinessErrorManager;
    static userNotAuthorizedOnGroup(group: {
      entity: {
        name: string;
      };
      id: string;
    }): BusinessErrorManager;
    static joinWaitingToConfirm(email: string): BusinessErrorManager;
    static invitationAlreadyExists(email: string, entity: string, id: string): BusinessErrorManager;
    static userAlreadyExistOnGroup(email: string, entity: string): BusinessErrorManager;
    static mailTemplatesNotDefined(template: string): BusinessErrorManager;
    static mailNotSend(): BusinessErrorManager;
    static invitationNotValid(email: string, entity: string): BusinessErrorManager;
    static codeNotFound(code: string, entity: string): BusinessErrorManager;
  }
}


// manager.ts
declare namespace ns_2 {
  import ErrorManager = __beyond_dep_ns_0.ErrorManager;
  export class BusinessErrorManager extends ErrorManager {
    get is(): '@beyond-js/groups/error';
  }
}


export import ErrorCodes = ns_0.ErrorCodes;
export import ErrorGenerator = ns_1.ErrorGenerator;
export import BusinessErrorManager = ns_2.BusinessErrorManager;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };